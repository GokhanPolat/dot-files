#+TITLE:  Emacs Settings for Python
#+AUTHOR: Howard Abrams
#+EMAIL:  howard.abrams@gmail.com
#+DATE:   [2014-02-01 Sat]
#+TAGS:   emacs python

Stole Python package ideas from [[https://github.com/gabrielelanaro/emacs-for-python][Gabriel Elanaro's git project]].  The
question is whether I use [[http://rope.sourceforge.net/ropemacs.html][Rope]] or [[https://github.com/tkf/emacs-jedi][Jedi]] for auto-completion and or
refactoring.  Rope, while claiming more features, seems to crash and
lock up my Emacs connections, so I'm back to using Jedi...for now. See
[[http://www.masteringemacs.org/articles/2013/01/10/jedi-completion-library-python/][this article]].

* Virtual Environments

  All development for Python is done in [[http://docs.python-guide.org/en/latest/dev/virtualenvs/][virtual environments]].
  However, this is a monstrous collection of layers, so I am now using
  [[https://github.com/yyuu/pyenv][pyenv]] for all my Pythonic virtualization needs, as it does a better
  job of both [[http://virtualenvwrapper.readthedocs.org/en/latest/index.html][virtualenvwrapper]] and [[https://github.com/kennethreitz/autoenv][autoenv]]:

  #+BEGIN_SRC sh
    brew install pyenv pyenv-virtualenv pyenv-virtualwrapper
  #+END_SRC

  Or, if on Linux, letâ€™s do it neckbeard-style:

  #+BEGIN_SRC sh
    git clone https://github.com/yyuu/pyenv.git ~/.pyenv
    git clone https://github.com/yyuu/pyenv-virtualenv.git ~/.pyenv/plugins/pyenv-virtualenv
  #+END_SRC

  Next, use pip to install virtualenv globally.

  #+BEGIN_SRC sh
    sudo pip install virtualenv
  #+END_SRC

  And use them by configuring our [[file:profile.org::*Python][.profile]].

  For a given /project/, we first install a particular Python version
  for it using the =pyenv= command (which must be done prior to
  starting a new virtual environment with the =mkvirtualenv= command):

  #+BEGIN_SRC sh
    pyenv install 2.6.6    # pyenv versions to see what is installed
  #+END_SRC

  Get path to this built/installed executable:

  #+BEGIN_SRC sh
    pyenv local 2.6.6
    pyenv which python
  #+END_SRC

  Each project (environment) will be *named*, and the version of
  Python can be specified based on the results of the =pyenv which=
  command above, for instance:

  #+BEGIN_SRC sh
    pyenv virtualenv 2.6.6 lab
  #+END_SRC

  And to use the environment in a shell, issue:

  #+BEGIN_SRC sh
    pyenv activate lab
  #+END_SRC

  Or, better yet, use the =local= option to make that environment
  active whenever you enter that directory:

  #+BEGIN_SRC sh
    pyenv local lab
  #+END_SRC

  Now, commands like =pip= should be isolated to that virtual environment
  as well as the needed version.

  The [[http://elpy.readthedocs.org/en/latest/concepts.html#virtual-envs][Elpy Project]] deals with the =virtualenvwrapper=, so call function,
  =M-x pyvenv-workon= to activate a virtual environment
  (see [[http://elpy.readthedocs.org/en/latest/concepts.html#virtual-envs][these instructions]]).

* Basics

  WSGI files are just Python files in disguise, so tell them to use
  the Python environment.   Careful with the tabs, my friend.

  #+BEGIN_SRC elisp
    (use-package python
      :mode ("\\.py\\'" . python-mode)
            ("\\.wsgi$" . python-mode)
      :interpreter ("python" . python-mode)

      :init
      (setq-default indent-tabs-mode nil)

      :config
      (setq python-indent 4)
      (add-hook 'python-mode-hook 'color-identifiers-mode))
  #+END_SRC

* Lint

  My company has standardized on the =pep8= project, just make sure you've
  install the [[https://flake8.readthedocs.org/en/2.3.0/][Flake8]] library:

  #+BEGIN_SRC sh
    pyenv activate wpc # Or whatever the project name is
    pip install --upgrade flake8
  #+END_SRC

  [[http://www.flycheck.org][Flycheck]] automatically supports [[http://www.flycheck.org/manual/latest/Supported-languages.html#Python][Python with Flake8]]. To use it, set
  the virtual environment, and the errors should appear automatically.

* Nose

  Unit test and code coverage tool for Python now comes to Emacs
  with [[http://ivory.idyll.org/articles/nose-intro.html][Python Nose]].

  #+BEGIN_SRC sh
    pip install nose
  #+END_SRC

  The ELPY project automatically adds support [[http://elpy.readthedocs.org/en/latest/ide.html#testing][for testing]].

* Jedi

  Auto-completion system for Python. This code hooks Jedi into the
  standard Python mode. See [[http://tkf.github.io/emacs-jedi/][these instructions]] for details (but this
  should have been installed for Elpy).

  #+BEGIN_SRC sh
    pip install jedi
  #+END_SRC

* ELPY

  According to the [[https://github.com/jorgenschaefer/elpy/wiki][ELPY Web Site]], we first install the python-based
  package components:

  #+BEGIN_SRC sh
    # and importmagic for automatic imports
    pip install importmagic
    pip install elpy
  #+END_SRC

  Once this has been installed, we can enable it:

  #+BEGIN_SRC elisp
    (use-package elpy
      :ensure t
      :commands elpy-enable
      :init (with-eval-after-load 'python (elpy-enable))

      :config
      (electric-indent-local-mode -1)
      (delete 'elpy-module-highlight-indentation elpy-modules)
      (delete 'elpy-module-flymake elpy-modules)

      (defun ha/elpy-goto-definition ()
        (interactive)
        (condition-case err
          (elpy-goto-definition)
          ('error (find-tag (symbol-name (symbol-at-point))))))

      :bind (:map elpy-mode-map ([remap elpy-goto-definition] . ha/elpy-goto-definition)))
  #+END_SRC

  Since ELPY is not a simple mode, but a collection of smaller modes
  stitched together, we have to call ~with-eval-after-load~ (see [[http://emacs.stackexchange.com/questions/10065/how-can-i-defer-loading-elpy-using-use-package][this discussion]])

  See [[http://elpy.readthedocs.org/en/latest/ide.html][the documentation]] for details, but:
  - =C-c C-f= :: Find Python file
  - =C-c C-s= :: Grep for a Python symbol
  - =C-c C-z= :: Switch to the Python Shell
  - =C-c C-c= :: Send region to the Python interpreter

  Note: The elpy-goto-definition is nice and all if you have a full
  project with a running interpreter, but I want to use tags as a
  fallback.  However, since the function throws an error, I can't
  simply /advice/ the function, like:

  #+BEGIN_SRC elisp :tangle no
    (advice-add 'elpy-goto-definition :after-until 'find-tag)
  #+END_SRC

  Instead, I had to create a function wrapper.

* Technical Artifacts

  Make sure that we can simply =require= this library.

  #+BEGIN_SRC elisp
    (provide 'init-python)
  #+END_SRC

  Before you can build this on a new system, make sure that you put
  the cursor over any of these properties, and hit: =C-c C-c=

#+DESCRIPTION: A literate programming version of my Emacs Initialization of Python
#+PROPERTY:    results silent
#+PROPERTY:    tangle ~/.emacs.d/elisp/init-python.el
#+PROPERTY:    header-args:sh  :tangle no
#+PROPERTY:    header-args:python  :tangle no
#+PROPERTY:    eval no-export
#+PROPERTY:    comments org
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
