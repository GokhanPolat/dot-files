#+TITLE:  Emacs Lisp Programming for Emacs
#+AUTHOR: Howard Abrams
#+EMAIL:  howard.abrams@workday.com
#+DATE:   2017 Aug 23
#+TAGS:   programming elisp

   Sure, everything in my setup files is in Emacs Lisp, but this helps
   me write more of that... like making snazzy symbols and colorizing
   the variables.

* Emacs Lisp Mode

  Hook in some packages into the built-in Emacs Lisp Mode.  The only
  real snazzy symbol that I like is replacing the =lambda= with λ:

   #+BEGIN_SRC elisp
     (use-package lisp-mode
       :bind (:map emacs-lisp-mode-map ("C-c C-z" . ielm))
       :init
       (defconst lisp--prettify-symbols-alist
         '(("lambda"  . ?λ)      ; Shrink this
           ("."       . ?•)))    ; Enlarge this
       :config
       (add-hook 'emacs-lisp-mode-hook 'global-prettify-symbols-mode)
       (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
       (add-hook 'emacs-lisp-mode-hook 'activate-aggressive-indent))
   #+END_SRC

* Keybindings

  Emacs obviously does Emacs Lisp well, including most keybindings you
  can imagine (did you know that you can be in the Info mode, and
  evaluate any Lisp expression in the documentation with a =C-x C-e=).
  Stole some key binding ideas from [[https://www.youtube.com/watch?v=QFClYrhV1z4][John Wiegley's talk]]:

  #+BEGIN_SRC elisp
    (defun scratch ()
      "Jump to the Scratch buffer."
      (interactive)
      (switch-to-buffer "*scratch*"))

    (bind-keys :prefix-map lisp-eval-map
               :prefix "C-c e"
               ("b" . do-eval-buffer)
               ("c" . eval-and-comment-output)   ;; Defined below
               ("d" . toggle-debug-on-error)
               ("f" . emacs-lisp-byte-compile-and-load)
               ("r" . eval-region)
               ("s" . scratch))

    (bind-keys :prefix-map lisp-find-map
               :prefix "C-h e"
               ("e" . view-echo-area-messages)
               ("f" . find-function)
               ("k" . find-function-on-key)
               ("l" . find-library)
               ("v" . find-variable)
               ("V" . apropos-value))
  #+END_SRC

  To help with some of the =find-= functions, we need IDO on /everything/:

  #+BEGIN_SRC emacs-lisp
    (defvar ido-enable-replace-completing-read t
      "If t, use ido-completing-read instead of completing-read if possible.

        Set it to nil using let in around-advice for functions where the
        original completing-read is required.  For example, if a function
        foo absolutely must use the original completing-read, define some
        advice like this:

        (defadvice foo (around original-completing-read-only activate)
          (let (ido-enable-replace-completing-read) ad-do-it))")

    ;; Replace completing-read wherever possible, unless directed otherwise
    (defadvice completing-read
        (around use-ido-when-possible activate)
      (if (or (not ido-enable-replace-completing-read) ; Manual override disable ido
              (and (boundp 'ido-cur-list)
                   ido-cur-list)) ; Avoid infinite loop from ido calling this
          ad-do-it
        (let ((allcomp (all-completions "" collection predicate)))
          (if allcomp
              (setq ad-return-value
                    (ido-completing-read prompt
                                         allcomp
                                         nil require-match initial-input hist def))
            ad-do-it))))
  #+END_SRC

  Hrm... perhaps this code should be in my primary [[file:emacs.org][Emacs configuration file]].

* Code Evaluation

  I'm intrigued with the [[https://www.emacswiki.org/emacs/InferiorEmacsLispMode][Inferior Emacs Lisp Mode]] (IELM), so let's add
  the =eldoc= feature to it:

  #+BEGIN_SRC elisp
    (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)
  #+END_SRC

  Typically, I just simply evaluate expressions as I see them.
  However, since the resulting expression may be larger than a single
  line, let's display large results in a separate buffer...which seems
  to be better than trying to view the echo area:

  #+BEGIN_SRC elisp
    (global-set-key [remap eval-expression] 'pp-eval-expression)
    (global-set-key [remap eval-last-sexp] 'pp-eval-last-sexp)
  #+END_SRC

* Paredit

  One of the cooler features of Emacs is the [[http://emacswiki.org/emacs/ParEdit][ParEdit mode]] which
  keeps all parenthesis balanced in Lisp-oriented languages.
  See this [[http://www.emacswiki.org/emacs/PareditCheatsheet][cheatsheet]].

  #+BEGIN_SRC elisp
    (use-package paredit
      :ensure t
      :init
      (add-hook 'emacs-lisp-mode-hook 'enable-paredit-mode)
      (add-hook 'eval-expression-minibuffer-setup-hook 'enable-paredit-mode)
      (add-hook 'ielm-mode-hook 'enable-paredit-mode))
  #+END_SRC

  As they say, “If you think paredit is not for you then you need to
  become the kind of person that paredit is for.”

* Nicer Paren Matching

  The reverse mode of the default parenthesis matching doesn’t match
  as well, so [[http://www.emacswiki.org/emacs/ShowParenMode][this code]] just makes it bold and more obvious:

  #+BEGIN_SRC elisp
    (use-package paren
      :init
      (set-face-background 'show-paren-match (face-background 'default))
      (set-face-foreground 'show-paren-match "#afa")
      (set-face-attribute  'show-paren-match nil :weight 'black)
      (set-face-background 'show-paren-mismatch (face-background 'default))
      (set-face-foreground 'show-paren-mismatch "#c66")
      (set-face-attribute  'show-paren-mismatch nil :weight 'black))
  #+END_SRC

  While we are at it, let's dim the parens with [[https://github.com/tarsius/paren-face][paren-face]]. May want
  to customize the face to be even darker.

  #+BEGIN_SRC elisp
    (use-package paren-face
      :ensure t
      :init
      (global-paren-face-mode))
  #+END_SRC

  While we are at it, let's make sure that we get an error if we ever
  attempt to save a file with mismatched parenthesis:

  #+BEGIN_SRC elisp
    (add-hook 'after-save-hook 'check-parens nil t)
  #+END_SRC

* Insert Comment of Eval

  While writing and documenting Emacs Lisp code, it would be helpful
  to insert the results of evaluation of an s-expression directly
  into the code as a comment:

  #+BEGIN_SRC elisp
    (defun eval-and-comment-output ()
      "Add the output of the sexp as a comment after the sexp"
      (interactive)
      (save-excursion
        (end-of-line)
        (condition-case nil
            (princ (concat " ; -> " (pp-to-string (eval (preceding-sexp))))
                   (current-buffer))
          (error (message "Invalid expression")))))
  #+END_SRC

* Code Navigation

  Let's try out the ability to jump around your source code /without/
  creating a =TAGS= file using the [[https://github.com/purcell/elisp-slime-nav][elisp-slime-nav]] project:

  #+BEGIN_SRC elisp
    (use-package elisp-slime-nav
      :ensure t
      :diminish t
      :init
      (dolist (hook '(emacs-lisp-mode-hook ielm-mode-hook))
        (add-hook hook 'elisp-slime-nav-mode)))
  #+END_SRC

* Refactoring

  Check out [[http://www.foldr.org/~michaelw/emacs/redshank/][Redshank]]:

  #+BEGIN_SRC elisp
    (use-package redshank
      :diminish t
      :init
      (add-hook 'emacs-lisp-mode-hook 'redshank-mode))
  #+END_SRC

  This tool appears to have some potential, but really could use a good tutorial.

* Linting

  To do a full analysis of a source code buffer, run: =M-x elint-initialize=

* Debugging

  Debugging is built into Emacs. Simply prepend a =C-u= before you
  evaluate a function, and when it is run, it will drop you into the
  debugger.

* Technical Artifacts

  Make sure that we can simply =require= this library.

  #+BEGIN_SRC elisp
  (provide 'init-elisp)
  #+END_SRC

  Before you can build this on a new system, make sure that you put
  the cursor over any of these properties, and hit: =C-c C-c=

#+DESCRIPTION: A literate programming version of my Emacs Initialization for Emacs Lisp
#+PROPERTY:    header-args   :results silent
#+PROPERTY:    header-args:sh     :tangle no
#+PROPERTY:    header-args:elisp  :tangle ~/.emacs.d/elisp/init-elisp.el
#+PROPERTY:    header-args:       :results silent   :eval no-export   :comments org
#+PROPERTY:    comments no
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
