#+TITLE:  Shell Dot Profile
#+AUTHOR: Howard Abrams
#+EMAIL:  howard.abrams@gmail.com
#+DATE:   [2013-12-06 Fri]
#+TAGS:   zsh shell

This generates my =.profile= that contains environment variables and
similar settings applicable to all my shells. Yeah, I'm some-what of
a shell-slut, and dabble between Zshell and Fish.

* Homebrew

  Make sure that [[http://brew.sh/][Homebrew]] is both installed and configured correctly.

#+BEGIN_SRC sh
  if which osascript >/dev/null 2>&1
  then
    export ON_A_MAC=1
  fi

  if [ ! -d /usr/local/Cellar -a -n "$ON_A_MAC" ]
  then
    echo "ZOMG! No Homebrew installed! Installing now..."
    ruby -e "`curl -fsSL https://raw.github.com/mxcl/homebrew/go/install`"
  fi
#+END_SRC

* Path

   We want to add these directories, but only if they exist. This
   makes this more portable between my computers.

#+BEGIN_SRC sh
  OLDPATH=$PATH
  PATH=$HOME/bin

  for DIR in /usr/local/git/bin /opt/local/bin /opt/local/sbin /usr/local/bin /usr/local/sbin
  do
    if [ -d $DIR ]
    then
        PATH=$PATH:$DIR
    fi
  done

  PATH=$PATH:$OLDPATH
#+END_SRC

* Emacs

  Set =EDITOR= to start up an =emacsclient=, but do that from the one
  I built from Homebrew:

#+BEGIN_SRC sh
  export ALTERNATE_EDITOR=/usr/local/bin/emacs
  export EDITOR=/usr/local/bin/emacsclient
#+END_SRC

* Global Aliases

  I dislike =more=, especially since =less= is now really sweet.

#+BEGIN_SRC sh
  alias more=less
#+END_SRC

* System-Specific Variables

  Host-specific values, are stored in a separate profile.

#+BEGIN_SRC sh
  if [ -x $HOME/.profile-local ]
  then
    . $HOME/.profile-local
  fi
#+END_SRC

* Python

  Assuming we have [[https://github.com/yyuu/pyenv][pyenv]] installed, let’s activate it:

  #+BEGIN_SRC sh
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"

    eval "$(pyenv init -)"
    eval "$(pyenv virtualenv-init -)"
  #+END_SRC

  See [[file:emacs-python.org::*Virtual%20Environments][Virtual Environments]] in the Python Emacs setup for details.

* Prompt

  Better approach to displaying the current path, is to only display
  the first or second directory name ... any maybe the name of the Git
  project. Holy hell, so many exceptions and so few patterns...

  #+BEGIN_SRC sh
    function trim_dir {
        V='[[:alnum:]._-]'
        D='[[:alnum:]._/-]'
        sed -E "s|/$D+/($V+)|../\1|" <<< $1
    }

    function prompt_dir {
        PWD=$(pwd)

        if [[ $PWD == $HOME ]]
        then
            echo -n '~'
        elif [[ $PWD == $HOME/Work ]]
        then
            echo -n '~/Work'

             # In a Git project?
        elif PRJ=$(git rev-parse --show-toplevel 2>/dev/null)
        then
            name=$(basename $PRJ)
            rest=$(sed "s|$PRJ||" <<< $PWD)
            echo -n "[$name]$(trim_dir $rest)"

             # In work-related directory...
        elif [[ $PWD == $HOME/Work/* ]]
        then
            name=$(sed -E "s|$HOME/Work/([[:alnum:]_-]+).*|\1|" <<< $PWD)
            base=$(basename $PWD)
            intr=$(basename `dirname $PWD`)

            if [[ $name == $base ]]
            then
                echo -n "Ⓦ/$name"
            elif [[ $intr == $name ]]
            then
                echo -n "Ⓦ/$name/$base"
            else
                echo -n "Ⓦ/$name/../$base"
            fi

             # In a home directory
        elif [[ $PWD == $HOME/* ]]
        then
            if [[ $(basename `dirname $PWD`) == $(basename $HOME) ]]
            then
                echo -n "~/$(basename $PWD)"
            else
                echo -n "~/$(trim_dir $PWD)"
            fi
        else
            trim_dir $PWD
        fi
    }
  #+END_SRC

  I wanna add everything to my command line prompt: the Git
  repository, the Python virtual environment (in white), the Ruby
  Virtual Environment (in red) ... of course, now I have no room to
  type commands. ;-)

  #+BEGIN_SRC sh
    if [ -d ~/.rvm ]
    then
        export PS1='\[\e[1;31m\]$(~/.rvm/bin/rvm-prompt v g)\[\e[1;34m\] $(prompt_dir)$(__git_ps1 " \[\e[1;32m\]:%s")\[\e[0m\] \$ '
    else
        export PS1='\[\e[1;34m\]$(prompt_dir)$(__git_ps1 " \[\e[1;32m\]:%s")\[\e[0m\] \$ '
    fi
  #+END_SRC

  Good thing I seldom use a shell.

* My Function Collection

  Load up my [[file:sh-functions.org][shared functions]]. These can be shared with Bash, Fish and
  Zshell.

#+BEGIN_SRC sh
  if [ -f $HOME/.sh-funcs.sh ]
  then
      . $HOME/.sh-funcs.sh
  fi
#+END_SRC

* Technical Gunk

  Anything else that is interesting, will be set up in more
  either more shell-specific files, or in [[file:sh-functions.org][Shell Functions]] file.
  The following are the tangled settings. Type: =C-c C-v t=
  to create the script file.

#+PROPERTY: tangle ~/.profile
#+PROPERTY: comments org
#+PROPERTY: shebang #!/bin/sh
#+DESCRIPTION: Global environment variables for all shells
