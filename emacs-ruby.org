#+TITLE:  Ruby Configuration for Emacs
#+AUTHOR: Howard Abrams
#+EMAIL:  howard.abrams@gmail.com
#+DATE:   2014 Nov 24
#+TAGS:   emacs ruby
#+PROPERTY: header-args:sh :results silent :tangle no

We begin by stealing a typical Ruby environment from [[https://github.com/bbatsov/prelude/blob/master/modules/prelude-ruby.el][Prelude]].

* Ruby Installation

  I like having everything Ruby controlled by [[https://rvm.io/][RVM]]:

  #+BEGIN_SRC sh
    curl -sSL https://get.rvm.io | bash -s stable
  #+END_SRC

  And then install a Ruby version and set it to be used globally:

  #+BEGIN_SRC sh
    rvm install 1.9.3-p550
    rvm use 1.9.3-p550
  #+END_SRC

  See the [[#ruby-virtual-manager][Ruby Virtual Manager]] section below.

* Supporting Packages

  Starting to collect the Ruby packages that make the most sense for
  my work-flow and development style:

  #+BEGIN_SRC elisp
    (packages-install '( ruby-tools
                         inf-ruby
                         rvm
                         yari
                         robe
                         rubocop
                         smartparens ))
  #+END_SRC

  Notice that I’m not using [[https://github.com/zenspider/enhanced-ruby-mode][enh-ruby-mode]], as I have found that the
  updated =ruby-mode= that is standard in Emacs 24.4 is quite good.

* Ruby Mode and File Extensions

  Many odd files need to associated with any Ruby mode:

  #+BEGIN_SRC elisp
    (when (require 'ruby-mode nil t)
      (add-to-list 'auto-mode-alist '("\\.rb$"          . ruby-mode))
      (add-to-list 'interpreter-mode-alist '("ruby"     . ruby-mode))
      (add-to-list 'auto-mode-alist '("\\.rake\\'"      . ruby-mode))
      (add-to-list 'auto-mode-alist '("Rakefile\\'"     . ruby-mode))
      (add-to-list 'auto-mode-alist '("\\.gemspec\\'"   . ruby-mode))
      (add-to-list 'auto-mode-alist '("\\.ru\\'"        . ruby-mode))
      (add-to-list 'auto-mode-alist '("Gemfile\\'"      . ruby-mode))
      (add-to-list 'auto-mode-alist '("Guardfile\\'"    . ruby-mode))
      (add-to-list 'auto-mode-alist '("Capfile\\'"      . ruby-mode))
      (add-to-list 'auto-mode-alist '("\\.thor\\'"      . ruby-mode))
      (add-to-list 'auto-mode-alist '("\\.rabl\\'"      . ruby-mode))
      (add-to-list 'auto-mode-alist '("Thorfile\\'"     . ruby-mode))
      (add-to-list 'auto-mode-alist '("Vagrantfile\\'"  . ruby-mode))
      (add-to-list 'auto-mode-alist '("\\.jbuilder\\'"  . ruby-mode))
      (add-to-list 'auto-mode-alist '("Podfile\\'"      . ruby-mode))
      (add-to-list 'auto-mode-alist '("\\.podspec\\'"   . ruby-mode))
      (add-to-list 'auto-mode-alist '("Puppetfile\\'"   . ruby-mode))
      (add-to-list 'auto-mode-alist '("Berksfile\\'"    . ruby-mode))
      (add-to-list 'auto-mode-alist '("Appraisals\\'"   . ruby-mode)))
  #+END_SRC

  Use [[http://web-mode.org/][web-mode]] for dealing with ERB templates:

  #+BEGIN_SRC elisp
    (when (require 'web-mode nil t)
      (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode)))
  #+END_SRC

* Customizations

  Create a function that will set the default values for the
  =ruby-mode=, and tie that to the =ruby-mode-hoook=:

  #+BEGIN_SRC elisp
    (defun ha/ruby-mode-defaults ()
      ;; It hate subwords
      (superword-mode +1)
      (ruby-tools-mode +1)

      (setq-default ruby-indent-level 2)
      (setq-default ruby-indent-tabs-mode nil)

      ;; Using =expand-regions= and send a region to REPLs:
      (local-set-key (kbd "C-c i") 'ruby-send-region))

    (add-hook 'ruby-mode-hook 'ha/ruby-mode-defaults)
  #+END_SRC

* Better Keyboard Movement

  Each language that I use, I like to bind the /sexp/ movement:

  #+BEGIN_SRC elisp
    (define-key ruby-mode-map (kbd "M-<down>") 'ruby-forward-sexp)
    (define-key ruby-mode-map (kbd "M-<up>") 'ruby-backward-sexp)
  #+END_SRC

  Other keystrokes to remember:

  - =C-M-p= / =C-M-n= :: Move to the beginning and end of a block
  - =C-M-a= / =C-M-e= :: Move to the beginning and end of a function

* Ruby Virtual Manager

  Using [[https://github.com/senny/rvm.el][RVM integration]] for Emacs:

  #+BEGIN_SRC elisp
    (when (require 'rvm nil t)
      (rvm-use-default))
  #+END_SRC

  When jumping from project to project, need to run the command:
  =rvm-use= ... which must be done before starting an Eshell (that
  is, if you’re into that sort of thing).

* Ruby Functional Doc

  The [[http://www.emacswiki.org/cgi-bin/emacs/YARI][Yari]] project attempts to hook Ruby calls to the =ri= project.

  #+BEGIN_SRC elisp
    (when (require 'yari nil t)
      (add-hook 'ruby-mode-hook
                (lambda ()
                  (local-set-key [f1] 'yari))))
  #+END_SRC

  Now, place point on some function, and hit =F1= to see the glory.
  In order for this to work, we need to generate the missing docs:

  #+BEGIN_SRC sh :tangle no
    gem rdoc --all --ri --no-rdoc
    rvm docs generate all
  #+END_SRC

  And we may have to do this for every change to RVM. Seems that
  =dash-at-point= is more effective (=C-c d=), however.

* Ruby REPL

  I am not sure I can learn a new language without a REPL connected to
  my editor, and for Ruby, this is [[https://github.com/nonsequitur/inf-ruby][inf-ruby]]:

  #+BEGIN_SRC elisp
    (require 'inf-ruby)
    (add-hook 'ruby-mode-hook 'inf-ruby-minor-mode)
  #+END_SRC

  To start eval-ing, do: =M-x inf-ruby=  ... or: =C-c C-s=

* Smart Parens

  Can I get the same wonder from *paredit* and Lisp in my Ruby using
  [[https://github.com/Fuco1/smartparens][smartparens]]? Not really, as it isn’t as pedantic as
  =paredit=. Still, it may be good enough for Ruby:

  #+BEGIN_SRC elisp
    (when (require 'smartparens-config nil t)
          (require 'smartparens-ruby)

      (add-hook 'ruby-mode-hook 'smartparens-mode))
  #+END_SRC

* Rubocop

  The lint-like style checker of choice for Ruby is [[https://github.com/bbatsov/rubocop][Rubocop]].
  The [[https://github.com/bbatsov/rubocop-emacs][rubocop.el]] mode should just work with [[https://github.com/flycheck/flycheck][Flycheck]].

  #+BEGIN_SRC elisp
    (when (require 'rubocop nil t)
      (add-hook 'ruby-mode-hook 'rubocop-mode))
  #+END_SRC

  Install it with: =gem install rubocop=

* Robe

  [[https://github.com/dgutov/robe][Robe]] is a “code assistance” tool, that pretty much only works with
  methods (and doesn’t seem to work well with direct functions). One
  must install the following before this will work:

  #+BEGIN_SRC sh :tangle no
    gem install pry pry-doc
  #+END_SRC

  Once started with =robe-start=, we should get code completion:

  #+BEGIN_SRC elisp
    (when (require 'robe nil t)
      (add-hook 'ruby-mode-hook 'robe-mode)
      (eval-after-load 'company '(push 'company-robe company-backends))

      ;; Don't care to have to start up Ruby if I'm just jumping around
      (define-key robe-mode-map (kbd "M-.") 'xref-find-definitions)
      (define-key robe-mode-map (kbd "C-M-.") 'robe-jump)

      (defadvice inf-ruby-console-auto (before activate-rvm-for-robe activate)
        (rvm-activate-corresponding-ruby)))
  #+END_SRC

  With a complex Ruby project, one should evaluate the entire Ruby
  file (=C-c C-l=), and then run:

  - =robe-jump= to go to the method’s definition
  - =robe-ask= will act like jump, but asks for the method first
  - =robe-doc= displays the method documentation (doesn’t seem to be as useful as =dash-at-point=).

* Ruby Tools

  The little refactoring available with [[https://github.com/rejeep/ruby-tools.el][Ruby Tools]] looks interesting.

  #+BEGIN_SRC elisp
    (when (require 'ruby-tools nil t)
      (add-hook 'ruby-mode-hook 'ruby-tools-mode))
  #+END_SRC

  The primary key-bindings operate on the /thing/ the cursor is on,
  e.g. a string, a symbol, etc.

  - =C-‘= converts the thing into a single-quoted string
  - =C-“= converts the thing into a double-quoted string
  - =C-:= converts the thing into a symbol

  Other options:

  - =C-;= clears the string
  - Inside a string the =#= key will insert a variable interpolation
    if the string is double-quoted (this is actually what I use this
    package the most)

* Technical Artifacts

  Make sure that we can simply =require= this library.

#+BEGIN_SRC elisp
  (provide 'init-ruby)
#+END_SRC

  Before you can build this on a new system, make sure that you put
  the cursor over any of these properties, and hit: =C-c C-c=

#+DESCRIPTION: A literate programming version of my Emacs Initialization for Ruby
#+PROPERTY:    results silent
#+PROPERTY:    tangle ~/.emacs.d/elisp/init-ruby.el
#+PROPERTY:    header-args:ruby  :tangle no
#+PROPERTY:    header-args:sh  :tangle no
#+PROPERTY:    eval no-export
#+PROPERTY:    comments org
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
